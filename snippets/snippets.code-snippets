{
  "Create Spring Boot Application": {
    "prefix": "bspring-main",
    "body": [
        "package ${1:be.bnair.projet;}",
        "",
        "import org.springframework.boot.SpringApplication;",
        "import org.springframework.boot.autoconfigure.SpringBootApplication;",
        "import org.springframework.boot.context.properties.EnableConfigurationProperties;",
        "import org.springframework.data.jpa.repository.config.EnableJpaAuditing;",
        "",
        "@SpringBootApplication",
        "@EnableJpaAuditing",
        "@EnableConfigurationProperties",
        "public class ${2:ApplicationName} {",
        "",
        "    public static void main(String[] args) {",
        "        SpringApplication.run(${2:ApplicationName}.class, args);",
        "    }",
        "",
        "}"
    ],
    "description": "Create a Spring Boot application class"
  },
  "Create BaseEntity Class": {
    "prefix": "bspring-baseentity",
    "body": [
        "package ${1:be.bnair.project.entities;}",
        "",
        "import jakarta.persistence.*;",
        "import lombok.Data;",
        "import org.springframework.data.annotation.CreatedDate;",
        "import org.springframework.data.annotation.LastModifiedDate;",
        "import org.springframework.data.jpa.domain.support.AuditingEntityListener;",
        "",
        "import java.io.Serializable;",
        "import java.time.LocalDate;",
        "",
        "@MappedSuperclass",
        "@EntityListeners(value = { AuditingEntityListener.class })",
        "@Data",
        "public abstract class ${2:BaseEntity<TKey extends Number>} {",
        "    @Id",
        "    @GeneratedValue(strategy = GenerationType.IDENTITY)",
        "    private TKey id;",
        "",
        "    @CreatedDate",
        "    private LocalDate createdAt;",
        "    @LastModifiedDate",
        "    private LocalDate updatedAt;",
        "    private boolean active = true;",
        "",
        "    @PrePersist",
        "    public void prePersist() {",
        "        this.createdAt = LocalDate.now();",
        "    }",
        "}"
    ],
    "description": "Create a BaseEntity class with JPA annotations"
  },
  "Create MoralEntity Class": {
    "prefix": "bspring-moral",
    "body": [
        "package ${1:be.bnair.project.entities;}",
        "",
        "import jakarta.persistence.*;",
        "import lombok.Data;",
        "",
        "@Entity(name = \"${2:User}\")",
        "@Inheritance(strategy = InheritanceType.JOINED)",
        "@Data",
        "public class ${3:UserEntity} extends BaseEntity<Integer> {",
        "    private String name;",
        "    private String phone;",
        "}"
    ],
    "description": "Create a UserEntity class with JPA annotations"
  },
  "Create CrudService Interface": {
    "prefix": "bspring-crud",
    "body": [
        "package ${1:be.bnair.project.services;}",
        "",
        "import org.apache.commons.lang3.NotImplementedException;",
        "import org.springframework.data.domain.Page;",
        "import java.util.List;",
        "import java.util.Optional;",
        "",
        "public interface CrudService<T, TKey> {",
        "    T create(T creater);",
        "    List<T> getAll(String orderBy);",
        "    Page<T> getAll(int count, int offset);",
        "    Optional<T> getOneById(TKey id);",
        "    default T update(TKey id, T updater) { throw new NotImplementedException(); }",
        "    default void remove(TKey id) { throw new NotImplementedException(); }",
        "}"
    ],
    "description": "Create a generic CrudService interface"
  },
  "Create UserService Interface": {
    "prefix": "bspring-author-service",
    "body": [
        "package ${1:be.bnair.project.services;}",
        "",
        "public interface ${2:UserService} extends CrudService<${3:UserEntity}, Long> {",
        "}"
    ],
    "description": "Create an UserService interface extending CrudService"
  },
  "Create UserServiceImpl Class": {
    "prefix": "bspring-post-service-impl",
    "body": [
        "package ${1:be.bnair.project.services.impl};",
        "",
        "import org.springframework.beans.factory.annotation.Autowired;",
        "import org.springframework.data.domain.Page;",
        "import org.springframework.data.domain.PageRequest;",
        "import org.springframework.data.domain.Sort;",
        "import org.springframework.stereotype.Service;",
        "",
        "import java.util.List;",
        "import java.util.Optional;",
        "",
        "@Service",
        "public class ${2:UserServiceImpl} implements UserService {",
        "    private final ${2:UserRepository} repository;",
        "",
        "    public ${2:UserServiceImpl}(${2:UserRepository} repository) {",
        "        this.repository = repository;",
        "    }",
        "",
        "    @Override",
        "    public ${3:User} create( ${3:User} creater) {",
        "        return repository.save(creater);",
        "    }",
        "",
        "    @Override",
        "    public List< ${3:User}> getAll(String orderBy) {",
        "        if (orderBy != null) {",
        "            return repository.findAll(Sort.by(orderBy));",
        "        }",
        "        return repository.findAll();",
        "    }",
        "",
        "    @Override",
        "    public Page< ${3:User}> getAll(int count, int offset) {",
        "        return repository.findAll(PageRequest.of(offset, count));",
        "    }",
        "",
        "    @Override",
        "    public Optional< ${3:User}> getOneById(Long id) {",
        "        return repository.findById(id);",
        "    }",
        "}"
    ],
    "description": "Create a UserServiceImpl class implementing UserService"
  },
  "Create PostRepository Interface": {
    "prefix": "bspring-repo",
    "body": [
        "package ${1:be.bnair.project.repositories};",
        "",
        "import org.springframework.data.jpa.repository.JpaRepository;",
        "import org.springframework.stereotype.Repository;",
        "",
        "@Repository",
        "public interface ${2:UserRepository} extends JpaRepository<${2:User}, Long> {",
        "}"
    ],
    "description": "Create a UserRepository interface extending JpaRepository"
  },
  "Create PostController Class": {
    "prefix": "bspring-controller",
    "body": [
        "package ${1:be.bnair.project.controllers};",
        "",
        "import org.springframework.beans.factory.annotation.Autowired;",
        "import org.springframework.web.bind.annotation.GetMapping;",
        "import org.springframework.web.bind.annotation.RequestMapping;",
        "import org.springframework.web.bind.annotation.RestController;",
        "",
        "import java.util.List;",
        "",
        "@RestController",
        "@RequestMapping(path = {\"/api/post\"})",
        "public class ${2:UserController} {",
        "    private final ${3:UserService} ${4:userService};",
        "",
        "    public ${2:UserController}(${3:UserService} ${4:userService}) {",
        "        this.${4:userService} = ${4:userService};",
        "    }",
        "",
        "    @GetMapping(path = {\"/list\"})",
        "    public List<${5:User}> findAllAction() {",
        "        return this.${4:userService}.getAll(null);",
        "    }",
        "}"
    ],
    "description": "Create a UserController class"
  },
  "Create JwtConfig Class": {
    "prefix": "bspring-jwt-config",
    "body": [
        "package ${1:be.bnair.template.config.jwt};",
        "",
        "import io.jsonwebtoken.SignatureAlgorithm;",
        "import io.jsonwebtoken.security.Keys;",
        "import org.springframework.boot.context.properties.ConfigurationProperties;",
        "import org.springframework.stereotype.Component;",
        "",
        "import javax.crypto.SecretKey;",
        "",
        "@Component",
        "@ConfigurationProperties(prefix = \"jwt\")",
        "public class JwtConfig {",
        "    public int expireAt = 86400;",
        "    public SecretKey secretKey = Keys.secretKeyFor(SignatureAlgorithm.HS512);",
        "}"
    ],
    "description": "Create a JwtConfig class for JWT configuration"
  },
  "Create JwtFilter Class": {
    "prefix": "bspring-jwt-filter",
    "body": [
        "package ${1:be.bnair.template.config.jwt};",
        "",
        "import jakarta.servlet.FilterChain;",
        "import jakarta.servlet.ServletException;",
        "import jakarta.servlet.http.HttpServletRequest;",
        "import jakarta.servlet.http.HttpServletResponse;",
        "import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;",
        "import org.springframework.security.core.context.SecurityContextHolder;",
        "import org.springframework.security.core.userdetails.UserDetails;",
        "import org.springframework.security.core.userdetails.UserDetailsService;",
        "import org.springframework.stereotype.Component;",
        "import org.springframework.web.filter.OncePerRequestFilter;",
        "",
        "import java.io.IOException;",
        "",
        "@Component",
        "public class JwtFilter extends OncePerRequestFilter {",
        "    private final UserDetailsService userDetailsService;",
        "    private final JwtUtil utils;",
        "",
        "    public JwtFilter(UserDetailsService userDetailsService, JwtUtil utils) {",
        "        this.userDetailsService = userDetailsService;",
        "        this.utils = utils;",
        "    }",
        "",
        "    @Override",
        "    protected void doFilterInternal(",
        "            HttpServletRequest request,",
        "            HttpServletResponse response,",
        "            FilterChain filterChain",
        "    ) throws ServletException, IOException {",
        "        String authorization = request.getHeader(\"Authorization\");",
        "        if (authorization != null) {",
        "            String[] authorizations = authorization.split(\" \");",
        "            String type = authorizations[0];",
        "            String token = authorizations[1];",
        "",
        "            if (type.equals(\"Bearer\") && !token.equals(\"\")) {",
        "                String username = this.utils.getUsernameFromToken(token);",
        "                UserDetails user = this.userDetailsService.loadUserByUsername(username);",
        "",
        "                if (this.utils.validateToken(token, user)) {",
        "                    UsernamePasswordAuthenticationToken upt = new UsernamePasswordAuthenticationToken(user, null, user.getAuthorities());",
        "",
        "                    SecurityContextHolder.getContext().setAuthentication(upt);",
        "                }",
        "            }",
        "        }",
        "",
        "        filterChain.doFilter(request, response);",
        "    }",
        "}"
    ],
    "description": "Create a JwtFilter class for JWT authorization"
  },
  "Create SecurityConfig Class": {
    "prefix": "bspring-security-config",
    "body": [
        "package ${1:be.bnair.template.config};",
        "",
        "import org.springframework.context.annotation.Bean;",
        "import org.springframework.context.annotation.Configuration;",
        "import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;",
        "import org.springframework.security.config.annotation.web.builders.HttpSecurity;",
        "import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;",
        "import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;",
        "import org.springframework.security.config.http.SessionCreationPolicy;",
        "import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;",
        "import org.springframework.security.crypto.password.PasswordEncoder;",
        "import org.springframework.security.web.SecurityFilterChain;",
        "import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;",
        "",
        "@Configuration",
        "@EnableWebSecurity",
        "@EnableMethodSecurity(securedEnabled = true)",
        "public class ${2:SecurityConfig} {",
        "    @Bean",
        "    public PasswordEncoder passwordEncoder() {",
        "        return new BCryptPasswordEncoder();",
        "    }",
        "",
        "    @Bean",
        "    public SecurityFilterChain httpSecurity(HttpSecurity http, JwtFilter jwtFilter) throws Exception {",
        "        http",
        "                .cors(AbstractHttpConfigurer::disable)",
        "                .csrf(AbstractHttpConfigurer::disable)",
        "                .authorizeHttpRequests((registry) -> {",
        "                    registry",
        "                            .requestMatchers(\"/signIn\").permitAll()",
        "                            .requestMatchers(\"/login\").permitAll()",
        "                            .requestMatchers(\"/signUp\").permitAll()",
        "                            .requestMatchers(\"/register\").permitAll()",
        "                            .anyRequest().authenticated();",
        "                })",
        "                .sessionManagement((session) -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS));",
        "",
        "        http.addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class);",
        "",
        "        return http.build();",
        "    }",
        "}"
    ],
    "description": "Create a SecurityConfig class for Spring Security configuration"
  },
  "Create SecurityController Class": {
    "prefix": "bspring-security-controller",
    "body": [
        "package ${1:be.bnair.template.controllers};",
        "",
        "import jakarta.servlet.http.HttpServletRequest;",
        "import org.springframework.http.HttpStatus;",
        "import org.springframework.http.ResponseEntity;",
        "import org.springframework.security.core.userdetails.UserDetails;",
        "import org.springframework.security.crypto.password.PasswordEncoder;",
        "import org.springframework.web.bind.annotation.*;",
        "",
        "@RestController",
        "public class ${2:SecurityController} {",
        "    private final JwtUtil utils;",
        "    private final PasswordEncoder passwordEncoder;",
        "    private final UserService securityService;",
        "",
        "    public ${2:SecurityController}(JwtUtil utils, PasswordEncoder passwordEncoder, UserService securityService) {",
        "        this.utils = utils;",
        "        this.passwordEncoder = passwordEncoder;",
        "        this.securityService = securityService;",
        "    }",
        "",
        "    @PostMapping(path = {\"/login\", \"/signIn\"})",
        "    public ResponseEntity<AuthResponse> loginAction(",
        "            HttpServletRequest request,",
        "            @RequestBody LoginForm form",
        "    ) {",
        "        System.out.println(request);",
        "        UserDetails user = this.securityService.loadUserByUsername(form.username);",
        "",
        "        if (passwordEncoder.matches(form.password, user.getPassword())) {",
        "            return ResponseEntity.ok(new AuthResponse(utils.generateToken(user), user));",
        "        }",
        "",
        "        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(null);",
        "    }",
        "",
        "    @GetMapping(path = {\"/register\", \"signUp\"})",
        "    public ResponseEntity<AuthResponse> getRegisterAction(",
        "            @RequestBody LoginForm form",
        "    ) {",
        "        UserEntity entity = new UserEntity();",
        "        entity.setUsername(form.username);",
        "        entity.setPassword(passwordEncoder.encode(form.password));",
        "",
        "        UserDetails user = this.securityService.insert(entity);",
        "        return ResponseEntity.ok(new AuthResponse(utils.generateToken(user), user));",
        "    }",
        "",
        "    @PostMapping(path = {\"/register\"})",
        "    public ResponseEntity<AuthResponse> registerAction(",
        "            @RequestBody LoginForm form",
        "    ) {",
        "        UserEntity entity = new UserEntity();",
        "        entity.setUsername(form.username);",
        "        entity.setPassword(passwordEncoder.encode(form.password));",
        "",
        "        UserDetails user = this.securityService.insert(entity);",
        "        return ResponseEntity.ok(new AuthResponse(utils.generateToken(user), user));",
        "    }",
        "}"
    ],
    "description": "Create a SecurityController class for handling security actions"
  },
  "Create TestController Class": {
    "prefix": "bspring-test-controller",
    "body": [
        "package ${1:be.bnair.template.controllers};",
        "",
        "import org.springframework.http.ResponseEntity;",
        "import org.springframework.web.bind.annotation.*;",
        "",
        "@RestController",
        "public class ${2:TestController} {",
        "    @GetMapping(path = \"/test\")",
        "    public ResponseEntity getTestPage() {",
        "        return ResponseEntity.ok().body(\"Success\");",
        "    }",
        "}"
    ],
    "description": "Create a TestController class for testing purposes"
  },
  "Create UserEntity Class": {
    "prefix": "bspring-user-entity",
    "body": [
        "package ${1:be.bnair.template.models.entities.security};",
        "",
        "import jakarta.persistence.Entity;",
        "import jakarta.persistence.Table;",
        "import jakarta.persistence.Transient;",
        "import lombok.Data;",
        "import org.springframework.security.core.GrantedAuthority;",
        "import org.springframework.security.core.authority.SimpleGrantedAuthority;",
        "import org.springframework.security.core.userdetails.UserDetails;",
        "",
        "import java.util.Arrays;",
        "import java.util.Collection;",
        "import java.util.List;",
        "",
        "@Entity(name = \"User\")",
        "@Table(name = \"security_user\")",
        "@Data",
        "public class ${2:UserEntity} extends AuditingBaseEntity implements UserDetails {",
        "    private String username;",
        "    private String password;",
        "    @Transient",
        "    @Override",
        "    public Collection<? extends GrantedAuthority> getAuthorities() {",
        "        List<String> authorities = Arrays.asList(\"ROLE_USER\");",
        "",
        "        return authorities.stream()",
        "                .map(SimpleGrantedAuthority::new)",
        "                .toList();",
        "    }",
        "",
        "    @Override",
        "    public String getPassword() {",
        "        return password;",
        "    }",
        "",
        "    @Override",
        "    public String getUsername() {",
        "        return username;",
        "    }",
        "",
        "    @Transient",
        "    @Override",
        "    public boolean isAccountNonExpired() {",
        "        return true;",
        "    }",
        "",
        "    @Transient",
        "    @Override",
        "    public boolean isAccountNonLocked() {",
        "        return true;",
        "    }",
        "",
        "    @Transient",
        "    @Override",
        "    public boolean isCredentialsNonExpired() {",
        "        return true;",
        "    }",
        "",
        "    @Transient",
        "    @Override",
        "    public boolean isEnabled() {",
        "        return true;",
        "    }",
        "}"
    ],
    "description": "Create a UserEntity class for user authentication and authorization"
  },
  "Create AuditingBaseEntity Class": {
    "prefix": "bspring-auditing-entity",
    "body": [
        "package ${1:be.bnair.template.models.entities};",
        "",
        "import jakarta.persistence.*;",
        "import lombok.Data;",
        "import org.springframework.data.annotation.CreatedDate;",
        "import org.springframework.data.annotation.LastModifiedDate;",
        "import org.springframework.data.jpa.domain.support.AuditingEntityListener;",
        "",
        "import java.time.LocalDate;",
        "",
        "@MappedSuperclass",
        "@Data",
        "@EntityListeners(value = {AuditingEntityListener.class})",
        "public class ${2:AuditingBaseEntity} {",
        "    @Id",
        "    @GeneratedValue(strategy = GenerationType.IDENTITY)",
        "    private Long id;",
        "",
        "    @CreatedDate",
        "    private LocalDate createdAt;",
        "    @LastModifiedDate",
        "    private LocalDate updatedAt;",
        "}"
    ],
    "description": "Create an AuditingBaseEntity class for auditing purposes"
  },
  "Create AuthResponse Class": {
    "prefix": "bspring-auth-response",
    "body": [
        "package ${1:be.bnair.template.models};",
        "",
        "import lombok.RequiredArgsConstructor;",
        "import org.springframework.security.core.userdetails.UserDetails;",
        "",
        "@RequiredArgsConstructor",
        "public class ${2:AuthResponse} {",
        "    public final String token;",
        "    public final UserDetails user;",
        "}"
    ],
    "description": "Create an AuthResponse class for authentication response"
  },
  "Create LoginForm Class": {
    "prefix": "bspring-login-form",
    "body": [
        "package ${1:be.bnair.template.models};",
        "",
        "public class ${2:LoginForm} {",
        "    public String username;",
        "    public String password;",
        "}"
    ],
    "description": "Create a LoginForm class for user login data"
  },
  "Create UserRepository Interface": {
    "prefix": "bspring-user-repository",
    "body": [
        "package ${1:be.bnair.template.repository};",
        "",
        "import org.springframework.data.jpa.repository.JpaRepository;",
        "import org.springframework.data.jpa.repository.Query;",
        "import org.springframework.data.repository.query.Param;",
        "import org.springframework.stereotype.Repository;",
        "",
        "import java.util.Optional;",
        "",
        "@Repository",
        "public interface ${2:UserRepository} extends JpaRepository<UserEntity, Long> {",
        "    @Query(value = \"SELECT u FROM UserEntity u WHERE u.username = :username\")",
        "    Optional<UserEntity> findByUsername(@Param(\"username\") String username);",
        "}"
    ],
    "description": "Create a UserRepository interface for user entity management"
  },
  "Create JwtUtil Class": {
    "prefix": "bspring-jwt-util",
    "body": [
        "package ${1:be.bnair.template.utils};",
        "",
        "import io.jsonwebtoken.Claims;",
        "import io.jsonwebtoken.JwtBuilder;",
        "import io.jsonwebtoken.JwtParser;",
        "import io.jsonwebtoken.Jwts;",
        "import org.springframework.security.core.userdetails.UserDetails;",
        "import org.springframework.stereotype.Component;",
        "",
        "import javax.crypto.SecretKey;",
        "import java.util.Date;",
        "import java.util.HashMap;",
        "import java.util.List;",
        "import java.util.Map;",
        "import java.util.function.Function;",
        "",
        "@Component",
        "public class ${2:JwtUtil} {",
        "    private final JwtConfig config;",
        "    private JwtParser parser;",
        "    private JwtBuilder builder;",
        "",
        "    public ${2:JwtUtil}(JwtConfig config) {",
        "        this.config = config;",
        "        SecretKey key = this.config.secretKey;",
        "        parser = Jwts.parser().setSigningKey(key);",
        "        builder = Jwts.builder().signWith(key);",
        "    }",
        "",
        "    public String getUsernameFromToken(String token) {",
        "        return this.getClaimFromToken(token, Claims::getSubject);",
        "    }",
        "",
        "    public Date getExpirationDateFromToken(String token) {",
        "        return this.getClaimFromToken(token, Claims::getExpiration);",
        "    }",
        "",
        "    public List<String> getAuthoritiesFromToken(String token) {",
        "        return this.getClaimFromToken(token, (claims) -> claims.get(\"roles\", List.class));",
        "    }",
        "",
        "    public boolean isExpire(String token) {",
        "        Date eDate = this.getClaimFromToken(token, Claims::getExpiration);",
        "",
        "        return eDate.before(new Date());",
        "    }",
        "",
        "    public <T> T getClaimFromToken(String token, Function<Claims, T> claimResolver) {",
        "        final Claims claims = getClaimsFromToken(token);",
        "        return claimResolver.apply(claims);",
        "    }",
        "",
        "    private Claims getClaimsFromToken(String token) {",
        "        return parser",
        "                .parseClaimsJws(token)",
        "                .getBody();",
        "    }",
        "",
        "    public boolean validateToken(String token, UserDetails userDetails) {",
        "        boolean hasSameSubject = getUsernameFromToken(token).equals(userDetails.getUsername());",
        "        return hasSameSubject && !isExpire(token);",
        "    }",
        "",
        "    public String generateToken(UserDetails userDetails) {",
        "        Map<String, Object> claims = new HashMap<>();",
        "        return generateToken(claims, userDetails.getUsername());",
        "    }",
        "",
        "    private String generateToken(Map<String, Object> claims, String subject) {",
        "        SecretKey key = this.config.secretKey;",
        "        return builder",
        "                .setClaims(claims)",
        "                .setSubject(subject)",
        "                .setIssuedAt(new Date())",
        "                .setExpiration(new Date(System.currentTimeMillis() + config.expireAt* 1000L))",
        "                .compact();",
        "    }",
        "}"
    ],
    "description": "Create a JwtUtil class for JWT token handling"
  }
}